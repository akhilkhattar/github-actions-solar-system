name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  ECR_REPOSITORY: akhil-staging/solar-system
  IMAGE_TAG: ${{ github.sha }}
  aws-region: us-east-1
jobs:
#     unit-testing:
#         name: Unit Testing
#         services:
#           mango-db:
#             image: siddharth67/mongo-db:non-prod
#             ports:
#               - 27017:27017
#         env:
#             MONGO_URI: mongodb://localhost:27017/superData
#             MONGO_USERNAME: non-prod-user
#             MONGO_PASSWORD: non-prod-password
#         runs-on: ubuntu-latest
#         steps:
#         - name: Checkout Repository
#           uses: actions/checkout@v4

#         - name: Setup NodeJS Version
#           uses: actions/setup-node@v4
#           with:
#             node-version: 20

#         - name: cache npm dependencies
#           uses: actions/cache@v3
#           with:
#             path: node_modules
#             key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}
    
#         - name: Install Dependencies
#           run: npm install
    
#         - name: Unit Testing
#           run: npm test
          
#         - name: Archive Test Result
#           if: always()
#           uses: actions/upload-artifact@v4
#           with:
#             name: Mocha-Test-Result
#             path: test-results.xml

#     code-coverage:
#       name: Code Coverage
#       container: 
#           image: node:18
#       services:
#         mango-db:
#           image: siddharth67/mongo-db:non-prod
#           options: 
#             --name mongo
          
#       env:
#           MONGO_URI: mongodb://mongo:27017/superData
#           MONGO_USERNAME: non-prod-user
#           MONGO_PASSWORD: non-prod-password
#       runs-on: ubuntu-latest
#       steps:
#       - name: checkout repo
#         uses: actions/checkout@v4
#       # - name: Setup NodeJS Version
#       #   uses: actions/setup-node@v4
#       #   with:
#       #     node-version: 18

#       - name: cache npm dependencies
#         uses: actions/cache@v3
#         with:
#           path: node_modules
#           key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}
#       - name: Install Dependencies
#         run: npm install
#       - name: run code coverage
#         continue-on-error: true
#         run: npm run coverage
#       - name: Archive Test Result
#         uses: actions/upload-artifact@v4
#         with:
#           name: Code-Coverage-Result
#           path: coverage
#           retention-days: 5

    # docker:
    #     name: containerization
    #     # needs: [unit-testing, code-coverage]
    #     runs-on: ubuntu-latest
    #     steps:
    #     - name: checkout repo
    #       uses: actions/checkout@v4

    #     - name: Set up Docker Buildx
    #       uses: docker/setup-buildx-action@v1

    #     - name: Configure AWS credentials
    #       uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
    #       with:
    #         aws-region: ${{env.aws-region}}

    #     - name: Log in to Amazon ECR
    #       id: login-ecr
    #       uses: aws-actions/amazon-ecr-login@v1
    #       with:
    #         mask-password: 'true'

    #     - name: Build and push Docker image
    #       env:
    #         ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
    #       run: |
    #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


    #     # - name: Dockerhub login
    #     #   uses: docker/login-action@v2.2.0
    #     #   with:
    #     #     username: ${{vars.DOCKERHUB_USERNAME}}
    #     #     password: ${{secrets.DOCKERHUB_PASSWORD}}

    #     # - name: GHCR login
    #     #   uses: docker/login-action@v2.2.0
    #     #   with:
    #     #     registry: ghcr.io
    #     #     username: ${{github.repository_owner}}
    #     #     password: ${{secrets.GITHUB_TOKEN}}

    #     # - name: Docker build for testing
    #     #   uses: docker/build-push-action@v4
    #     #   with:
    #     #     context: .
    #     #     push: false
    #     #     tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

    #     # - name: Docker Image test
    #     #   run: |
    #     #     docker images
    #     #     docker run --name solar-system-app -d \
    #     #         -p 3000:3000 \
    #     #         -e MONGO_URI=$MANGO_URI \
    #     #         -e MONGO_USERNAME=$MONGO_USERNAME \
    #     #         -e MONGO_PASSWORD=$MONGO_PASSWORD \
    #     #         ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

    #     #     echo Testing Image URL using wget
    #     #     wget -q -O - 127.0.0.1:3000/live | grep live 

    #     # - name: Container registry Push
    #     #   uses: docker/build-push-action@v4
    #     #   with:
    #     #     context: .
    #     #     push: true
    #     #     tags: |
    #     #         ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
    #     #         ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}

    dev-deploy:
      # needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          
        - name: Set up kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: 'latest'

        - name: Set up stable version of Helm
          uses: azure/setup-helm@v1
          with:
            version: 'v3.9.4'  # Specify a stable Helm version
  
        - name: Remove outdated Helm repo (if exists)
          run: |
            helm repo remove ingress-nginx || echo "No existing ingress-nginx repo to remove."
  
        - name: Clean Helm repository cache
          run: |
            rm -rf ~/.cache/helm/repositories
            echo "Cleaned Helm repository cache."
  
        - name: Add Ingress-Nginx repository
          run: |
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
  
        - name: Update Helm repositories
          run: |
            helm repo update
  
        - name: Verify repositories
          run: |
            helm repo list


        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-region: us-east-1

        - name: Update kubeconfig
          run: |
            aws eks update-kubeconfig --name staging-cluster --region us-east-1

        - name: Check if namespace exists
          id: check-namespace
          run: |
            if kubectl get namespace ingress-nginx; then
              echo "Namespace exists"
            else
              echo "Namespace does not exist"
              echo "namespace_exists=false" >> $GITHUB_ENV
            fi
          
        - name: Create namespace if not exists
          if: env.namespace_exists == 'false'
          run: |
            kubectl create namespace ingress-nginx

        - name: Deploy NGINX Ingress Controller
          run: |
            helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace


        - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
          run: |
            echo INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}") >> $GITHUB_ENV

        - name: Replace Token in manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGE: ${{ github.sha }}
            INGRESS_IP: ${{env.INGRESS_IP}}

        - name: check files
          run: |
            cat kubernetes/development/*.yaml
        
        - name: create MangoDB secret
          run: |
            kubectl create namespace ${{vars.NAMESPACE}} \
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            -- from-literal=MONGO_URI=${{env.MONGO_URI}} \
            -- from-literal=MONGO_USERNAME=${{env.MONGO_USERNAME}} \
            -- from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
            -- save-config \
            -- dry-run=client \
            -o yaml | kubectl apply -f -

        - name: Deploy to Dev Env in EKS
          run: |
            kubectl apply -f kubernetes/development

        # - name: Install Kubectl cli
        #   uses: azure/setup-kubectl@v4
        #   with:
        #      version: v1.26.0
        # - name: Set Kubeconfig
        #   uses: azure/k8s-set-context@v4
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{secrets.KUBECONFIG}}

        # - name: Fetch Kubernetest Cluster Details
        #   run: |
        #     kubectl version --short
        #     echo -----------------------------
        #     kubectl get nodes